package dev.oasis.stockify.config;

import dev.oasis.stockify.model.AppUser;
import dev.oasis.stockify.model.Product;
import dev.oasis.stockify.repository.AppUserRepository;
import dev.oasis.stockify.repository.ProductRepository;
import dev.oasis.stockify.config.tenant.TenantContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.boot.CommandLineRunner;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.DependsOn;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.transaction.support.TransactionTemplate;
import javax.sql.DataSource;
import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

@Configuration
public class DataLoader {

    private static final Logger log = LoggerFactory.getLogger(DataLoader.class);
    private final List<String> TENANTS = Arrays.asList("tenant1", "tenant2", "tenant3");
    private final DataSource dataSource;
    private final PasswordEncoder passwordEncoder;
    private final JdbcTemplate jdbcTemplate;
    private final TransactionTemplate transactionTemplate;

    public DataLoader(DataSource dataSource,
                     PasswordEncoder passwordEncoder,
                     TransactionTemplate transactionTemplate) {
        this.dataSource = dataSource;
        this.passwordEncoder = passwordEncoder;
        this.jdbcTemplate = new JdbcTemplate(dataSource);
        this.transactionTemplate = transactionTemplate;
    }

    @Bean
    @DependsOn("flywayInitializer")
    public CommandLineRunner initData(AppUserRepository userRepository,
                                    ProductRepository productRepository) {
        log.debug("DataLoader.initData() başlatılıyor...");
        return args -> {
            log.info("DataLoader başlatıldı, örnek verileri yüklemeye başlıyor...");
            for (String tenant : TENANTS) {
                log.info("Tenant için işlemler başlatılıyor: {}", tenant);
                try (var conn = dataSource.getConnection()) {
                    // Şemayı oluştur
                    try (var stmt = conn.createStatement()) {
                        stmt.execute("CREATE SCHEMA IF NOT EXISTS " + tenant);
                        // Tablo oluştur
                        stmt.execute(String.format(
                            "CREATE TABLE IF NOT EXISTS %s.app_user (" +
                            "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                            "username VARCHAR(20) NOT NULL UNIQUE, " +
                            "password VARCHAR(255) NOT NULL, " +
                            "role VARCHAR(50) NOT NULL)",
                            tenant));

                        stmt.execute(String.format(
                            "CREATE TABLE IF NOT EXISTS %s.product (" +
                            "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                            "title VARCHAR(50) NOT NULL, " +
                            "description VARCHAR(1000), " +
                            "sku VARCHAR(50) NOT NULL UNIQUE, " +
                            "category VARCHAR(255) NOT NULL, " +
                            "price DECIMAL(10,2) NOT NULL, " +
                            "stock_level INT NOT NULL, " +
                            "low_stock_threshold INT NOT NULL, " +
                            "etsy_product_id VARCHAR(255))",
                            tenant));

                        stmt.execute(String.format(
                            "CREATE TABLE IF NOT EXISTS %s.stock_notification (" +
                            "id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                            "product_id BIGINT NOT NULL, " +
                            "created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT CURRENT_TIMESTAMP, " +
                            "read BOOLEAN NOT NULL DEFAULT FALSE, " +
                            "message VARCHAR(255) NOT NULL, " +
                            "FOREIGN KEY (product_id) REFERENCES %s.product(id))",
                            tenant, tenant));
                    }
                    org.springframework.jdbc.datasource.SingleConnectionDataSource scds =
                        new org.springframework.jdbc.datasource.SingleConnectionDataSource(conn, true);
                    JdbcTemplate tenantJdbc = new JdbcTemplate(scds);

                    // Admin kullanıcısı
                    tenantJdbc.update(
                        String.format("INSERT INTO %s.app_user (username, password, role) VALUES (?, ?, ?)", tenant),
                        tenant + "_admin",
                        passwordEncoder.encode("admin123"),
                        "ADMIN"
                    );
                    log.info("Admin kullanıcısı oluşturuldu - Tenant: {}", tenant);

                    // Normal kullanıcı
                    tenantJdbc.update(
                        String.format("INSERT INTO %s.app_user (username, password, role) VALUES (?, ?, ?)", tenant),
                        tenant + "_user",
                        passwordEncoder.encode("user123"),
                        "USER"
                    );
                    log.info("Normal kullanıcı oluşturuldu - Tenant: {}", tenant);

                    // Örnek ürünler
                    tenantJdbc.update(
                        String.format("INSERT INTO %s.product (title, sku, description, category, price, stock_level, low_stock_threshold) VALUES (?, ?, ?, ?, ?, ?, ?)", tenant),
                        "Örnek Ürün 1",
                        tenant + "-SKU-001",
                        "Bu bir örnek üründür - " + tenant,
                        "Elektronik",
                        new BigDecimal("999.99"),
                        100,
                        20
                    );

                    tenantJdbc.update(
                        String.format("INSERT INTO %s.product (title, sku, description, category, price, stock_level, low_stock_threshold) VALUES (?, ?, ?, ?, ?, ?, ?)", tenant),
                        "Örnek Ürün 2",
                        tenant + "-SKU-002",
                        "Bu bir başka örnek üründür - " + tenant,
                        "Aksesuar",
                        new BigDecimal("149.99"),
                        50,
                        10
                    );
                    log.info("Örnek ürünler oluşturuldu - Tenant: {}", tenant);
                    log.info("Tenant için işlemler tamamlandı: {}", tenant);
                } catch (Exception e) {
                    log.error("Tenant işlemlerinde hata: {} - {}", tenant, e.getMessage(), e);
                }
            }
        };
    }
}
