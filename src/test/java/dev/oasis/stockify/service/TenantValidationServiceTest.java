package dev.oasis.stockify.service;

import dev.oasis.stockify.config.tenant.TenantContext;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.transaction.annotation.Transactional;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.Statement;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Integration tests for TenantValidationService
 */
@SpringBootTest
@ActiveProfiles("test")
@Transactional
class TenantValidationServiceTest {

    @Autowired
    private TenantValidationService tenantValidationService;

    @Autowired
    private DataSource dataSource;

    private static final String TEST_TENANT_ID = "test-validation-tenant";

    @BeforeEach
    void setUp() {
        TenantContext.clear();
        setupTestTenant();
    }

    @AfterEach
    void tearDown() {
        TenantContext.clear();
        cleanupTestTenant();
    }

    @Test
    void shouldValidatePublicTenantAccess() {
        // Given
        TenantContext.setCurrentTenant("public");

        // When
        boolean result = tenantValidationService.validateTenantAccess("testuser");

        // Then
        assertThat(result).isTrue();
    }

    @Test
    void shouldValidateExistingUserInTenant() {
        // Given
        TenantContext.setCurrentTenant(TEST_TENANT_ID);

        // When
        boolean result = tenantValidationService.validateTenantAccess("admin");

        // Then
        assertThat(result).isTrue();
    }

    @Test
    void shouldRejectNonExistentUserInTenant() {
        // Given
        TenantContext.setCurrentTenant(TEST_TENANT_ID);

        // When
        boolean result = tenantValidationService.validateTenantAccess("nonexistentuser");

        // Then
        assertThat(result).isFalse();
    }

    @Test
    void shouldValidateActiveTenant() {
        // When
        boolean result = tenantValidationService.isTenantActive(TEST_TENANT_ID);

        // Then
        assertThat(result).isTrue();
    }

    @Test
    void shouldValidatePublicTenantAsActive() {
        // When
        boolean result = tenantValidationService.isTenantActive("public");

        // Then
        assertThat(result).isTrue();
    }

    @Test
    void shouldValidateTenantSchema() {
        // When
        boolean result = tenantValidationService.validateTenantSchema(TEST_TENANT_ID);

        // Then
        assertThat(result).isTrue();
    }

    @Test
    void shouldReturnTenantDisplayName() {
        // When
        String displayName = tenantValidationService.getTenantDisplayName(TEST_TENANT_ID);

        // Then
        assertThat(displayName).isNotNull();
        assertThat(displayName).isNotEmpty();
    }

    @Test
    void shouldReturnPublicForPublicTenant() {
        // When
        String displayName = tenantValidationService.getTenantDisplayName("public");

        // Then
        assertThat(displayName).isEqualTo("Public");
    }

    private void setupTestTenant() {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            
            String schemaName = TEST_TENANT_ID.toUpperCase();
            
            // Create schema
            statement.execute("CREATE SCHEMA IF NOT EXISTS " + schemaName);
            statement.execute("SET SCHEMA '" + schemaName + "'");
            
            // Create app_user table
            statement.execute("""
                CREATE TABLE IF NOT EXISTS app_user (
                    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    username VARCHAR(20) NOT NULL UNIQUE,
                    password VARCHAR(255) NOT NULL,
                    role VARCHAR(50) NOT NULL DEFAULT 'USER',
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    is_active BOOLEAN DEFAULT TRUE,
                    last_login TIMESTAMP
                )
            """);
            
            // Create other required tables
            statement.execute("""
                CREATE TABLE IF NOT EXISTS product (
                    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    sku VARCHAR(100) NOT NULL UNIQUE,
                    title VARCHAR(255) NOT NULL,
                    description TEXT,
                    category VARCHAR(100) NOT NULL,
                    price DECIMAL(15,2) NOT NULL DEFAULT 0.00,
                    stock_level INTEGER NOT NULL DEFAULT 0,
                    low_stock_threshold INTEGER NOT NULL DEFAULT 5,
                    etsy_product_id VARCHAR(100),
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    created_by BIGINT,
                    updated_by BIGINT,
                    is_active BOOLEAN DEFAULT TRUE,
                    is_featured BOOLEAN DEFAULT FALSE
                )
            """);
            
            statement.execute("""
                CREATE TABLE IF NOT EXISTS stock_notification (
                    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    product_id BIGINT NOT NULL,
                    message TEXT NOT NULL,
                    is_sent BOOLEAN DEFAULT FALSE,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """);
            
            statement.execute("""
                CREATE TABLE IF NOT EXISTS tenant_config (
                    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
                    config_key VARCHAR(100) NOT NULL UNIQUE,
                    config_value TEXT,
                    config_type VARCHAR(50) DEFAULT 'STRING',
                    description TEXT,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            """);
            
            // Insert test user
            statement.execute("""
                INSERT INTO app_user (username, password, role, is_active) 
                VALUES ('admin', '$2a$10$encrypted.password', 'ADMIN', true)
            """);
            
            // Insert tenant config
            statement.execute("""
                INSERT INTO tenant_config (config_key, config_value, config_type, description) 
                VALUES ('tenant_status', 'ACTIVE', 'STRING', 'Tenant status')
            """);
            
            statement.execute("""
                INSERT INTO tenant_config (config_key, config_value, config_type, description) 
                VALUES ('company_name', 'Test Validation Company', 'STRING', 'Company display name')
            """);
            
        } catch (Exception e) {
            // Ignore setup errors
        }
    }

    private void cleanupTestTenant() {
        try (Connection connection = dataSource.getConnection();
             Statement statement = connection.createStatement()) {
            
            statement.execute("DROP SCHEMA IF EXISTS " + TEST_TENANT_ID.toUpperCase() + " CASCADE");
            
        } catch (Exception e) {
            // Ignore cleanup errors
        }
    }
}
